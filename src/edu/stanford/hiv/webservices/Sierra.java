/*##########################################################################*
 * Package
 *##########################################################################*/
package edu.stanford.hiv.webservices;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;

import org.jdom.JDOMException;

import edu.stanford.hiv.analysis.StanfordXMLInterpreter;
/*##########################################################################*
 * Imports
 *##########################################################################*/
import edu.stanford.hiv.webservices.stub.StanfordAlgorithmService;
import edu.stanford.hiv.webservices.stub.StanfordAlgorithmServiceLocator;
import fastatools.FASTAEntry;
import fastatools.FASTAReader;

/*##########################################################################*
 * Begin code
 *##########################################################################*/

/**
 * This is a simple Java class for calling the Stanford HIV Drug Resistance
 * Algorithm, code named Sierra. There are some external jar dependencies that
 * must be in the class path.
 * 
 * <p>
 * This code is available for public use. You may use and modify the code as you
 * see fit. We make no guarantee that the web service upon which this code
 * depends will always be available (e.g., the server might be down for
 * maintenance).
 * </p>
 * 
 * <p>
 * The Principal Investigator behind this Stanford effort is Robert M. Shafer,
 * M.D. You can find out more about us at <a
 * href="http://hivdb.stanford.edu">http://hivdb.stanford.edu</a>.
 * </p>
 * 
 * <p>
 * Email technical questions to Tommy Liu tliu@stanford.edu.
 * </p>
 * 
 * <p>
 * History:
 * <table border="1">
 * <tr>
 * <th>User</th>
 * <th>Date</th>
 * <th>Change Comment</th>
 * </tr>
 * 
 * <tr>
 * <td>zahid</td>
 * <td>13 Feb 2007</td>
 * <td>Web Service version beta-1.0.0 has introduced additional features to
 * process mutations.
 * <ol>
 * <li>Sierra now allows mutation lists as inputs to the interpretation
 * algorithm. The user can enter a collection of PR/RT mutation lists for
 * interpretation;</li>
 * <li>The <code>processMutationLists</code> web service method currently only
 * generates DETAILED reports;</li>
 * </ol>
 * </td>
 * </tr>
 * 
 * <tr>
 * <td>zahid</td>
 * <td>05 June 2006</td>
 * <td>Web Service version beta-0.9.4 has introduced additional features to
 * process sequences.
 * <ol>
 * <li>You can process multiple sequences in a single call to the web service
 * via the processSequences operation;</li>
 * <li>You can output results in SIMPLE or DETAIL formats. A detailed report
 * contains additional information from the drug resistance interpretation
 * algorithm;</li>
 * </ol>
 * </td>
 * </tr>
 * 
 * <tr>
 * <td>bbetts</td>
 * <td>26 February 2006</td>
 * <td>Minor changes to a few comments. Also got rid of some extra characters
 * that were in the example sequence.</td>
 * </tr>
 * 
 * <tr>
 * <td>bbetts</td>
 * <td>27 November 2005</td>
 * <td>Polish things up for public release.</td>
 * </tr>
 * 
 * <tr>
 * <td>bbetts</td>
 * <td>6 November 2005</td>
 * <td>Creation.</td>
 * </tr>
 *
 * </table>
 */
public class Sierra {
	/** Service wrapper. */
	private StanfordAlgorithmService service;

	/** Algorithm wrapper. */
	private edu.stanford.hiv.webservices.stub.StanfordAlgorithm algorithm;

	/**
	 * Sierra constructor. Once created, the object can be reused for an
	 * arbitrary number of sequences.
	 * 
	 * @throws SierraException
	 *             This gets thrown if anything goes wrong during construction.
	 */
	public Sierra() throws SierraException {
		try {
			service = new StanfordAlgorithmServiceLocator();
			algorithm = service.getStanfordAlgorithm();
		} catch (Exception e) {
			throw new SierraException("For whatever reason, Sierra is currently unavailable.");
		}
	}

	public String processSequencesHIVDB(String key, Integer reportType, String sequences) throws SierraException {
		// Not much to this. Get the sequence processed and return the result.
		try {
			return algorithm.processSequence(key, sequences);
		} catch (Exception e) {
			throw new SierraException("Error processing sequence.");
		}
	}

	/**
	 * This method exposes the new functioanlity added since web service version
	 * beta-0.9.4. You can submit multiple sequences for interpretation and you
	 * can specify the report type that will be generated by the web service. We
	 * currently support two report types:
	 * <ol>
	 * <li>Simple Report - This is the report generated by previous versions of
	 * the web service;</li>
	 * <li>Detailed Report - This is a more verbose report that includes
	 * additional information from the drug resistance interpretation algorithm;
	 * </li>
	 *
	 * @param key
	 *            Your Sierra key, supplied to you during registration.
	 * @param reportType
	 *            The report type that you want the web service to generate.
	 *            Currently support 0 (simple report) and 1 (detailed report).
	 * @param sequences
	 *            A read fasta file containing fasta sequences
	 * @return An XML report returned by Sierra.
	 * @throws SierraException
	 *             Thrown if anything goes wrong.
	 */
	public String processSequencesInFasta_REGA(String key, Integer reportType, String sequences) throws SierraException {
		// Not much to this. Get the sequence processed and return the result.
		try {
			return algorithm.processSequencesInFasta_REGA(key, reportType, sequences);
		} catch (Exception e) {
			throw new SierraException("Error processing sequence.");
		}
	}

	/**
	 * A handy method for cleaning a sequence before sending it to Sierra. Using
	 * this method is not mandatory, although it will guaantee you have no
	 * invalid characters in your sequence.
	 * 
	 * @param seq
	 *            The sequence to be cleaned.
	 * @return A clean nucleic acid sequence.
	 */
	public String cleanSequence(String seq) {
		return seq.replaceAll("[^A-Za-z]", "");
	}

	/**
	 * Simple method to test Sierra. Replace the null key below with the key you
	 * received by email when registering for Sierra.
	 * 
	 * We will test three different scenarios:
	 * <ol>
	 * <li>A simple call to processSequence to process a single nucleic acid
	 * sequence;</li>
	 * <li>A call to processSequences to process three nucleic acid sequences
	 * and report the results in a simple report;</li>
	 * <li>A call to processSequences to process three nucleic acid sequences
	 * and report the results in a detailed report.</li>
	 * <li></li>
	 * 
	 * @param args
	 *            Ignored.
	 */
	public static void main(String[] args) {
		// The key to call the Stanford service
		String key = "";
		String sequenceName = "";
		
		if (args.length < 2) {
			System.err.println("Usage: rega_resistance_service.jar inputSequences.fasta outputInterpretation.csv");
			System.exit(0);
		}
		
		// The fasta file with sequences that you want to interpret
		String inputFileLocation = args[0];
//		String inputFileLocation = "/Users/ewout/Documents/Rega_Algorithm/test.fasta";
		// The csv that is parsed from the xml that we get back from Stanford
		String outputFileLocation = args[1];
//		String outputFileLocation = "/Users/ewout/Documents/Rega_Algorithm/test.csv";

		
		try {
			Sierra sierra = new Sierra();
			StanfordXMLInterpreter stanfordXMLInterpreter = null;
			FASTAReader fastaReader = FASTAReader.getInstance(new File(inputFileLocation));
			FASTAEntry fastaEntry = fastaReader.readNext();
			if(fastaEntry != null) {
				String xml = sierra.processSequencesInFasta_REGA(key, edu.stanford.hiv.webservices.stub.StanfordAlgorithm.DETAIL_REPORT, fastaEntry.getHeaderLine() + "\n" + fastaEntry.getSequence() + "\n");
				System.out.println("XML: " + xml);
				stanfordXMLInterpreter = new StanfordXMLInterpreter(new StringReader(xml), new File(outputFileLocation));
				stanfordXMLInterpreter.parseDrugs(new StringReader(xml));
			}
			StringBuilder stringBuilder = new StringBuilder();
			int counter = 1;
			while((fastaEntry = fastaReader.readNext()) != null) {
				stringBuilder.append(fastaEntry.getHeaderLine() + "\n" + fastaEntry.getSequence() + "\n");
				if(++counter == 1000) {
					counter = 1;
					doAnalyses(sierra, key, stanfordXMLInterpreter, stringBuilder.toString());
					stringBuilder.setLength(0);
				}
			}
			// Prevent exception on file with only one sequence
			if(stringBuilder.length() > 0) {
				doAnalyses(sierra, key, stanfordXMLInterpreter, stringBuilder.toString());
			}
		} catch (Exception e) {
			System.err.println("SequenceID: " + sequenceName);
			e.printStackTrace();
		}
	}

	private static void doAnalyses(Sierra sierra, String key, StanfordXMLInterpreter stanfordXMLInterpreter, String sequences) throws JDOMException, IOException, SierraException {
		String xml = sierra.processSequencesInFasta_REGA(key, edu.stanford.hiv.webservices.stub.StanfordAlgorithm.DETAIL_REPORT, sequences);
		stanfordXMLInterpreter.parseDrugs(new StringReader(xml));
	}
}
